services:
  elasticsearch:
    image: elasticsearch:7.17.12
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - main_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: secureuser
      RABBITMQ_DEFAULT_PASS: securepass
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - main_network
    restart: unless-stopped

  golang-service:
    image: yourrepo/golang-service:latest
    container_name: golang-service
    environment:
      ENV_FILE: .env  # ترجیحا env جداگانه بساز
    networks:
      - main_network
    depends_on:
      - mysql
    restart: unless-stopped

  django-service:
    image: yourrepo/django-service:latest
    container_name: django-service
    environment:
      - ELASTIC_HOST=http://elasticsearch:9200
    networks:
      - main_network
    depends_on:
      - mysql
      - elasticsearch
    restart: unless-stopped

  users-service:
    image: yourrepo/users-service:latest
    container_name: users-service
    restart: unless-stopped
    networks:
      - main_network
    depends_on:
      - mysql
      - redis

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - main_network
    volumes:
      - redis_data:/data

  products-service:
    image: yourrepo/products-service:latest
    container_name: products-service
    restart: unless-stopped
    networks:
      - main_network
    depends_on:
      - mysql

  notification-service:
    image: yourrepo/notification-service:latest
    container_name: notification-service
    restart: unless-stopped
    networks:
      - main_network
    depends_on:
      - mysql

  yii2-basic-service:
    image: yourrepo/yii2-basic-service:latest
    container_name: yii2-basic-service
    restart: unless-stopped
    networks:
      - main_network
    depends_on:
      - mysql

  order-service:
    image: yourrepo/order-service:latest
    deploy:
      replicas: 2      # فقط در docker swarm فعال میشه، برای معمولی اینو بردار
    restart: unless-stopped
    networks:
      - main_network
    depends_on:
      - mysql

  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: strong_root_password
      MYSQL_DATABASE: three_services
      MYSQL_PASSWORD: strong_db_password
      MYSQL_USER: three_user
    networks:
      - main_network
    volumes:
      - mysql_data:/var/lib/mysql

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/:/etc/nginx/ssl:ro
      # استاتیک و مدیا رو هم باید اینجا mount کنی اگه مثلا پوشه جدا داری
    networks:
      - main_network
    depends_on:
      - users-service
      - products-service
      - order-service
      - golang-service
      - django-service

volumes:
  elasticsearch-data:
  mysql_data:
    driver: local
  redis_data:
  rabbitmq_data:

networks:
  main_network:
    driver: bridge
    attachable: true
    name: main_network
    external: false








#services:
#  gitlab:
#    deploy:
#      resources:
#        limits:
#          cpus: '0.75'
#          memory: 2560M
#    image: gitlab/gitlab-ce:latest
#    container_name: gitlab
#    restart: always
#    hostname: git.developeryar.ir
#    environment:
#      GITLAB_OMNIBUS_CONFIG: |
#        external_url 'http://git.developeryar.ir'
#        gitlab_rails['gitlab_shell_ssh_port'] = 2222
#        puma['worker_processes'] = 1
#        sidekiq['max_concurrency'] = 5
#        postgresql['shared_buffers'] = "128MB"
#        postgresql['max_worker_processes'] = 2
#        redis['max_memory'] = "64MB"
#        prometheus_monitoring['enable'] = false
#    ports:
#      - "2222:22"
#    volumes:
#      - gitlab_config:/etc/gitlab
#      - gitlab_logs:/var/log/gitlab
#      - gitlab_data:/var/opt/gitlab
#    networks:
#      - main_network
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost/-/health || exit 1"]
#      interval: 60s
#      timeout: 60s
#      retries: 5
#      start_period: 10m
#
#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    restart: always
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
#      - /etc/letsencrypt:/etc/letsencrypt:ro
#    networks:
#      - main_network
#    depends_on:
#      - gitlab
#
#networks:
#  main_network:
#    driver: bridge
#
#volumes:
#  gitlab_config:
#  gitlab_logs:
#  gitlab_data:
